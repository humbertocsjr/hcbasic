
Module CGA
    Dim Video as VideoMode

    Public Sub Mode640x200x2
        asm "mov ax, 0x6"
        asm "int 0x10"
        Video.Width = 640
        Video.Height = 200
        Video.Colors = 2
        Video.DrawPixel = AddressOf(DrawPixel)
        GenericVideo.RegisterDrawLine Video
        GenericVideo.RegisterDrawEllipse Video
        Video.DrawRectangle = AddressOf(DrawRectangle)
        Video.ClearScreen = AddressOf(ClearScreen)
        Graphics.ModeManual Video
        GenericVideo.Register2ColorsPalette
    End

    Sub DrawPixel(mode as VideoMode, x as UInt16, y as UInt16, color as UInt16)
        If x >= mode.Width Then Return
        If y >= mode.Height Then Return
        asm "mov ax, 0xba00"
        asm "test word [bp+12], 1"
        asm "jne .par"
        asm "mov ax, 0xb800"
        asm ".par:"
        asm "mov es, ax"
        asm "mov ax, [bp+12]"
        asm "shr ax, 1"
        asm "mov bx, 80"
        asm "mul bx"
        asm "mov bx, [bp+10]"
        asm "shr bx, 1"
        asm "shr bx, 1"
        asm "shr bx, 1"
        asm "add ax, bx"
        asm "mov di, ax"
        asm "mov cx, [bp+10]"
        asm "and cx, 7"
        asm "inc cx"
        asm "mov ax, [bp+14]"
        asm "and ax, 1"
        asm "je .inverte"
        asm "ror al, cl"
        asm "es or [di], al"
        asm "jmp .fim"
        asm ".inverte:"
        asm "mov al, 1"
        asm "ror al, cl"
        asm "not ax"
        asm "es and [di], al"
        asm ".fim:"
    End

    Sub ByteOr(mode as VideoMode, x as UInt16, y as UInt16, value as UInt8)
        asm "mov ax, 0xba00"
        asm "test word [bp+12], 1"
        asm "jne .par"
        asm "mov ax, 0xb800"
        asm ".par:"
        asm "mov es, ax"
        asm "mov ax, [bp+12]"
        asm "shr ax, 1"
        asm "mov bx, 80"
        asm "mul bx"
        asm "mov bx, [bp+10]"
        asm "shr bx, 1"
        asm "shr bx, 1"
        asm "shr bx, 1"
        asm "add ax, bx"
        asm "mov di, ax"
        asm "mov ax, [bp+14]"
        asm "es or [di], al"
    End

    Sub ByteAnd(mode as VideoMode, x as UInt16, y as UInt16, value as UInt8)
        asm "mov ax, 0xba00"
        asm "test word [bp+12], 1"
        asm "jne .par"
        asm "mov ax, 0xb800"
        asm ".par:"
        asm "mov es, ax"
        asm "mov ax, [bp+12]"
        asm "shr ax, 1"
        asm "mov bx, 80"
        asm "mul bx"
        asm "mov bx, [bp+10]"
        asm "shr bx, 1"
        asm "shr bx, 1"
        asm "shr bx, 1"
        asm "add ax, bx"
        asm "mov di, ax"
        asm "mov ax, [bp+14]"
        asm "es and [di], al"
    End

    Sub ByteAndOr(mode as VideoMode, x as UInt16, y as UInt16, valueAnd as UInt8, valueOr as UInt8)
        asm "mov ax, 0xba00"
        asm "test word [bp+12], 1"
        asm "jne .par"
        asm "mov ax, 0xb800"
        asm ".par:"
        asm "mov es, ax"
        asm "mov ax, [bp+12]"
        asm "shr ax, 1"
        asm "mov bx, 80"
        asm "mul bx"
        asm "mov bx, [bp+10]"
        asm "shr bx, 1"
        asm "shr bx, 1"
        asm "shr bx, 1"
        asm "add ax, bx"
        asm "mov di, ax"
        asm "mov ax, [bp+14]"
        asm "es and [di], al"
        asm "mov ax, [bp+16]"
        asm "es or [di], al"
    End

    Sub ByteSet(mode as VideoMode, x as UInt16, y as UInt16, value as UInt8, len as UInt16)
        asm "mov ax, 0xba00"
        asm "test word [bp+12], 1"
        asm "jne .par"
        asm "mov ax, 0xb800"
        asm ".par:"
        asm "mov es, ax"
        asm "mov ax, [bp+12]"
        asm "shr ax, 1"
        asm "mov bx, 80"
        asm "mul bx"
        asm "mov bx, [bp+10]"
        asm "shr bx, 1"
        asm "shr bx, 1"
        asm "shr bx, 1"
        asm "add ax, bx"
        asm "mov di, ax"
        asm "mov ax, [bp+14]"
        asm "mov cx, [bp+16]"
        asm "cld"
        asm "rep stosb"
    End

    Function ConvertMask(first as UInt16, last as UInt16) as UInt8
        Dim ret as UInt8
        Dim i as UInt16
        ret = 0
        For i = first and 7 to last and 7
            ret = ret or (128 shr i)
        End
        Return ret
    End

    Function ConvertInverseMask(first as UInt16, last as UInt16) as UInt8
        Dim ret as UInt8
        Dim i as UInt16
        ret = 0
        For i = first and 7 to last and 7
            ret = ret or (128 shl i)
        End
        Return Not ret
    End


    Sub DrawRectangle(mode as VideoMode, x1 as UInt16, y1 as UInt16, x2 as UInt16, y2 as UInt16, borderColor as UInt16, backgroundColor as UInt16)
        Dim y as UInt16
        Dim x as UInt16
        Dim comp as Int16
        Dim tmp as UInt16
        Dim tmpor as UInt8
        Dim tmpand as UInt8
        Dim diff as UInt16
        If (x2 - x1) < 24 Then
            If backgroundColor <> 0xffff Then
                For y = y1+1 to y2-1
                    Graphics.DrawLine x1 + 1, y, x2 - 1, y, backgroundColor
                End
            End
            Graphics.DrawLine x1, y1, x2, y1, borderColor
            Graphics.DrawLine x1, y2, x2, y2, borderColor
            Graphics.DrawLine x1, y1, x1, y2, borderColor
            Graphics.DrawLine x2, y1, x2, y2, borderColor
            Return
        End
        comp = (x1 and 7) - (x2 and 7)
        diff = 0
        if comp == 0 then diff = -1
        if comp < 0 then diff = -1
        tmp = (x1 and 7)
        tmpor = 0
        If tmp > 0 Then tmpand = ConvertMask(0, tmp-1) Else tmpand = 0
        If borderColor and 1 Then 
            tmpor = ConvertMask(tmp, tmp)
            ByteAndOr mode, x1, y1, tmpand, ConvertMask(tmp, 7)
            ByteAndOr mode, x1, y2, tmpand, ConvertMask(tmp, 7)
        Else
            ByteAndOr mode, x1, y1, tmpand, 0
            ByteAndOr mode, x1, y2, tmpand, 0
        End
        If backgroundColor <> 0xffff Then
            If backgroundColor and 1 Then
                tmpor = tmpor or ConvertMask(tmp+1, 7)
            End
        Else
            tmpand = tmpand or ConvertMask(tmp+1, 7)
        End
        For y = y1 + 1 to y2 - 1
            ByteAndOr mode, x1, y, tmpand, tmpor
        End
        If backgroundColor <> 0xffff Then
            If backgroundColor and 1 Then
                tmpand = 0xff
            Else
                tmpand = 0
            End
            For y = y1 to y2
                ByteSet mode, x1 + 8, y, tmpand, ((x2 - x1) SHR 3) + diff
            End
        End

        tmp = (x2 and 7)
        tmpor = 0
        If tmp < 7 Then tmpand = ConvertMask(tmp+1, 7) Else tmpand = ConvertMask(tmp, tmp)
        If borderColor and 1 Then 
            tmpor = ConvertMask(tmp, tmp)
            ByteAndOr mode, x2, y1, tmpand, ConvertMask(0, tmp)
            ByteAndOr mode, x2, y2, tmpand, ConvertMask(0, tmp)
        Else
            ByteAndOr mode, x2, y1, tmpand, 0
            ByteAndOr mode, x2, y2, tmpand, 0
        End
        If tmp > 1 Then
            If backgroundColor <> 0xffff Then
                If backgroundColor and 1 Then
                    tmpor = tmpor or ConvertMask(0, tmp-1)
                End
            Else
                tmpand = tmpand or ConvertMask(0, tmp-1)
            End
        End
        For y = y1 + 1 to y2 - 1
            ByteAndOr mode, x2, y, tmpand, tmpor
        End
        If borderColor and 1 Then
            tmpand = 0xff
        Else
            tmpand = 0
        End
        ByteSet mode, x1 + 8, y1, tmpand, ((x2 - x1) SHR 3) + diff
        ByteSet mode, x1 + 8, y2, tmpand, ((x2 - x1) SHR 3) + diff
    End

    Sub ClearScreen(mode as VideoMode, color as UInt16)
        Dim tmp as UInt8
        Dim y as UInt16
        tmp = 0
        For y = 0 to 479
            If color and 1 Then tmp = 0xaa
            ByteSet mode, 0, y, tmp, 80
            y++
            If color and 1 Then tmp = 0x55
            ByteSet mode, 0, y, tmp, 80
        End
    End
End
