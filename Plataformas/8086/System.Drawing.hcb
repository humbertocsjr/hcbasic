Imports System

Structure VideoMode
    Dim Width as UInt16
    Dim Height as UInt16
    Dim Colors as UInt16
    Dim DrawPixel as Action(Of VideoMode, UInt16, UInt16, UInt16)
    Dim DrawRectangle as Action(Of VideoMode, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16)
    Dim DrawEllipse as Action(Of VideoMode, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16)
    Dim DrawLine as Action(Of VideoMode, UInt16, UInt16, UInt16, UInt16, UInt16)
    Dim ClearScreen as Action(Of VideoMode, UInt16)
End

Module Graphics
    Dim Active as UInt16
    Dim Video as VideoMode

    Public Sub DrawPixel(x as UInt16, y as UInt16, color as UInt16)
        If Active == 0 Then Throw AccessDeniedError
        Video.DrawPixel.Invoke x, y, color
    End

    Public Sub DrawLine(x1 as UInt16, y1 as UInt16, x2 as UInt16, y2 as UInt16, color as UInt16)
        If Active == 0 Then Throw AccessDeniedError
        Video.DrawLine.Invoke x1, y1, x2, y2, color
    End

    Public Sub DrawRectangle(x1 as UInt16, y1 as UInt16, x2 as UInt16, y2 as UInt16, borderColor as UInt16, backgroundColor as UInt16)
        If Active == 0 Then Throw AccessDeniedError
        Video.DrawRectangle.Invoke x1, y1, x2, y2, borderColor, backgroundColor
    End

    Public Sub DrawEllipse(x1 as UInt16, y1 as UInt16, x2 as UInt16, y2 as UInt16, borderColor as UInt16, backgroundColor as UInt16)
        If Active == 0 Then Throw AccessDeniedError
        Video.DrawEllipse.Invoke x1, y1, x2, y2, borderColor, backgroundColor
    End

    Public Sub ClearScreen(color as UInt16)
        If Active == 0 Then Throw AccessDeniedError
        Video.ClearScreen.Invoke color
    End

    Public Function GetActive() as UInt16
        Return Active
    End

    Public Function GetWidth() as UInt16
        If Active == 0 Then Throw AccessDeniedError
        Return Video.Width
    End

    Public Function GetHeight() as UInt16
        If Active == 0 Then Throw AccessDeniedError
        Return Video.Height
    End

    Public Function GetColors() as UInt16
        If Active == 0 Then Throw AccessDeniedError
        Return Video.Colors
    End

    Public Sub Mode80x25x16
        Active = 0
        asm "mov ax, 3"
        asm "int 0x10"
    End

    Public Sub ModeManual(newMode as VideoMode)
        Active = 1
        #Video = #newMode
        @Video = @newMode
    End

End

Module CGA
    Dim Video as VideoMode

    Public Sub Mode640x200x2
        asm "mov ax, 0x6"
        asm "int 0x10"
        Video.Width = 640
        Video.Height = 200
        Video.Colors = 2
        Video.DrawPixel = AddressOf(DrawPixel)
        Video.DrawLine = AddressOf(DrawLine)
        Video.DrawEllipse = AddressOf(DrawEllipse)
        Video.DrawRectangle = AddressOf(DrawRectangle)
        Video.ClearScreen = AddressOf(ClearScreen)
        Graphics.ModeManual Video
    End

    Sub DrawPixel(mode as VideoMode, x as UInt16, y as UInt16, color as UInt16)
        asm "mov ax, 0xba00"
        asm "test word [bp+12], 1"
        asm "jne .par"
        asm "mov ax, 0xb800"
        asm ".par:"
        asm "mov es, ax"
        asm "mov ax, [bp+12]"
        asm "shr ax, 1"
        asm "mov bx, 80"
        asm "mul bx"
        asm "mov bx, [bp+10]"
        asm "shr bx, 1"
        asm "shr bx, 1"
        asm "shr bx, 1"
        asm "add ax, bx"
        asm "mov di, ax"
        asm "mov cx, [bp+10]"
        asm "and cx, 7"
        asm "inc cx"
        asm "mov ax, [bp+14]"
        asm "and ax, 1"
        asm "je .inverte"
        asm "ror al, cl"
        asm "es or [di], al"
        asm "jmp .fim"
        asm ".inverte:"
        asm "ror al, cl"
        asm "not ax"
        asm "es and [di], al"
        asm ".fim:"
    End

    Sub DrawLine(mode as VideoMode, x1 as UInt16, y1 as UInt16, x2 as UInt16, y2 as UInt16, color as UInt16)
        Dim inc as Int16
        Dim inc1 as Int16
        Dim inc2 as Int16
        Dim dx as Int16
        Dim dy as Int16
        Dim d as Int16
        Dim x as UInt16
        Dim y as UInt16
        If x1 > x2 Then
            x = x1
            x1 = x2
            x2 = x
            y = y1
            y1 = y2
            y2 = y
        End
        If y2 > y1 Then
            inc = 1
        Else
            inc = -1
        End
        x = x1
        y = y1
        dx = x2 - x1
        dy = y2 - y1
        If dx > dy Then
            d = (dy SHL 1) - dx
            inc1 = (dy-dx) SHL 1
            inc2 = dy SHL 1
            DrawPixel mode, x, y, color
            For x = x1 + 1 To x2
                If d >= 0 Then
                    y = y + inc
                    d = d + inc1
                Else
                    d = d + inc2
                End
                DrawPixel mode, x, y, color
            End
        Else
            d = (dx SHL 1) - dy
            inc1 = (dx-dy) SHL 1
            inc2 = dx SHL 1
            DrawPixel mode, x, y, color
            For y = y1 + 1 To y2
                If d >= 0 Then
                    x = x + inc
                    d = d + inc1
                Else
                    d = d + inc2
                End
                DrawPixel mode, x, y, color
            End
        End
    End

    Sub DrawEllipse(mode as VideoMode, x1 as UInt16, y1 as UInt16, x2 as UInt16, y2 as UInt16, borderColor as UInt16, backgroundColor as UInt16)
        Throw NotImplementedError
    End

    Sub ByteOr(mode as VideoMode, x as UInt16, y as UInt16, value as UInt8)
        asm "mov ax, 0xba00"
        asm "test word [bp+12], 1"
        asm "jne .par"
        asm "mov ax, 0xb800"
        asm ".par:"
        asm "mov es, ax"
        asm "mov ax, [bp+12]"
        asm "shr ax, 1"
        asm "mov bx, 80"
        asm "mul bx"
        asm "mov bx, [bp+10]"
        asm "shr bx, 1"
        asm "shr bx, 1"
        asm "shr bx, 1"
        asm "add ax, bx"
        asm "mov di, ax"
        asm "mov ax, [bp+14]"
        asm "es or [di], al"
    End

    Sub ByteAnd(mode as VideoMode, x as UInt16, y as UInt16, value as UInt8)
        asm "mov ax, 0xba00"
        asm "test word [bp+12], 1"
        asm "jne .par"
        asm "mov ax, 0xb800"
        asm ".par:"
        asm "mov es, ax"
        asm "mov ax, [bp+12]"
        asm "shr ax, 1"
        asm "mov bx, 80"
        asm "mul bx"
        asm "mov bx, [bp+10]"
        asm "shr bx, 1"
        asm "shr bx, 1"
        asm "shr bx, 1"
        asm "add ax, bx"
        asm "mov di, ax"
        asm "mov ax, [bp+14]"
        asm "es and [di], al"
    End

    Sub ByteAndOr(mode as VideoMode, x as UInt16, y as UInt16, valueAnd as UInt8, valueOr as UInt8)
        asm "mov ax, 0xba00"
        asm "test word [bp+12], 1"
        asm "jne .par"
        asm "mov ax, 0xb800"
        asm ".par:"
        asm "mov es, ax"
        asm "mov ax, [bp+12]"
        asm "shr ax, 1"
        asm "mov bx, 80"
        asm "mul bx"
        asm "mov bx, [bp+10]"
        asm "shr bx, 1"
        asm "shr bx, 1"
        asm "shr bx, 1"
        asm "add ax, bx"
        asm "mov di, ax"
        asm "mov ax, [bp+14]"
        asm "es and [di], al"
        asm "mov ax, [bp+16]"
        asm "es or [di], al"
    End

    Sub ByteSet(mode as VideoMode, x as UInt16, y as UInt16, value as UInt8, len as UInt16)
        asm "mov ax, 0xba00"
        asm "test word [bp+12], 1"
        asm "jne .par"
        asm "mov ax, 0xb800"
        asm ".par:"
        asm "mov es, ax"
        asm "mov ax, [bp+12]"
        asm "shr ax, 1"
        asm "mov bx, 80"
        asm "mul bx"
        asm "mov bx, [bp+10]"
        asm "shr bx, 1"
        asm "shr bx, 1"
        asm "shr bx, 1"
        asm "add ax, bx"
        asm "mov di, ax"
        asm "mov ax, [bp+14]"
        asm "mov cx, [bp+16]"
        asm "cld"
        asm "rep stosb"
    End

    Sub DrawRectangle(mode as VideoMode, x1 as UInt16, y1 as UInt16, x2 as UInt16, y2 as UInt16, borderColor as UInt16, backgroundColor as UInt16)
        Dim y as UInt16
        Dim x as UInt16
        Dim tmp as UInt16
        Dim tmpor as UInt8
        Dim tmpand as UInt8
        tmpor = 0
        tmpand = 0xff
        tmp = 7 - (x1 and 7)
        For x = 0 to tmp
            If x == tmp Then
                If borderColor and 1 Then
                    tmpand = tmpand or ((1 shl x))
                    tmpor  = tmpor or ((1 shl x))
                End
            Else
                If backgroundColor <> 0xffff Then
                    If backgroundColor and 1 Then
                        tmpand = tmpand or ((1 shl x))
                        tmpor  = tmpor or ((1 shl x))
                    End
                End
            End
        End
        tmpand = not tmpand
        For y = y1 + 1 to y2 - 1
            ByteAndOr mode, x1, y, tmpand, tmpor
        End
        If backgroundColor <> 0xffff Then
            If backgroundColor and 1 Then
                tmpand = 0xff
            Else
                tmpand = 0
            End
            For y = y1 to y2
                ByteSet mode, x1 + 8, y, tmpand, (x2 - x1 - 8) SHR 3
            End
        End

        tmpor = 0
        tmpand = 0xff
        tmp = x2 and 7
        For x = 0 to tmp
            If x == tmp Then
                If borderColor and 1 Then
                    tmpand = tmpand or ((128 shr x))
                    tmpor  = tmpor or ((128 shr x))
                End
            Else
                If backgroundColor <> 0xffff Then
                    If backgroundColor and 1 Then
                        tmpand = tmpand or ((128 shr x))
                        tmpor  = tmpor or ((128 shr x))
                    End
                End
            End
        End
        For y = y1 + 1 to y2 - 1
            ByteAndOr mode, x2, y, tmpand, tmpor
        End
        tmpor = 0
        tmpand = 0xff
        tmp = 7 - (x1 and 7)
        For x = 0 to tmp
            tmpand = tmpand or ((1 shl x))
            If borderColor and 1 Then
                tmpor  = tmpor or ((1 shl x))
            End
        End
        ByteAndOr mode, x1, y1, tmpand, tmpor
        ByteAndOr mode, x1, y2, tmpand, tmpor
        tmpor = 0
        tmpand = 0xff
        tmp = x2 and 7
        For x = 0 to tmp
            tmpand = tmpand or ((128 shr x))
            If borderColor and 1 Then
                tmpor  = tmpor or ((128 shr x))
            End
        End
        ByteAndOr mode, x2, y1, tmpand, tmpor
        ByteAndOr mode, x2, y2, tmpand, tmpor
        If borderColor and 1 Then
            tmpand = 0xff
        Else
            tmpand = 0
        End
        ByteSet mode, x1 + 8, y1, tmpand, (x2 - x1 - 8) SHR 3
        ByteSet mode, x1 + 8, y2, tmpand, (x2 - x1 - 8) SHR 3
    End

    Sub ClearScreen(mode as VideoMode, color as UInt16)
        Dim tmp as UInt8
        Dim y as UInt16
        If color and 1 Then
            tmp = 0xff
        Else
            tmp = 0
        End
        For y = 0 to 199
            ByteSet mode, 0, y, tmp, 80
        End
    End
End