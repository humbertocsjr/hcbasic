Imports System
Imports System.Drawing

Structure EventArgs
    Dim Cancel as UInt16
End

Structure MouseEventArgs
    Dim X as UInt16
    Dim Y as UInt16
    Dim PrimaryButton as UInt16
    Dim SecondaryButton as UInt16
    Dim ScrollValue as Int16
    Dim Cancel as UInt16
End

Structure KeyboardEventArgs
    Dim AsciiChar as UInt8
    Dim UTF8LowWord as UInt16
    Dim UTF8HighWord as UInt16
    Dim Pressed as UInt16
    Dim Cancel as UInt16
End

Structure Control
    Dim Top as UInt16
    Dim Left as UInt16
    Dim Height as UInt16
    Dim Width as UInt16
    Dim Value as UInt16
    Dim Text as PtrByteArray
    Dim Visible as UInt8
    Dim Resizable as UInt8
    Dim Focusable as UInt8
    Dim RedrawOnFocusChanged as UInt8
    Dim HasFocus as UInt8
    Dim Font as PtrByteArray
    Dim ControlPaint as Action(Of Control, UInt16)
    Dim ControlMouseInteraction as Action(Of Control, MouseEventArgs)
    Dim ControlKeyboardInteracion as Action(Of Control, KeyboardEventArgs)
    Dim ControlFocusChanged as Action(Of Control, UInt16)
    Dim OnClick as Action(Of Control, MouseEventArgs)
    Dim OnKeyPress as Action(Of Control, KeyboardEventArgs)
    Dim OnKeyRelease as Action(Of Control, KeyboardEventArgs)
    Dim OnFocus as Action(Of Control)
    Dim OnLostFocus as Action(Of Control)
    Dim HasParent as UInt8
    Dim Parent as PtrByteArray
    Dim HasChild as UInt8
    Dim Child as PtrByteArray
    Dim HasNextControl as UInt8
    Dim NextControl as PtrByteArray
    Dim PaddingTop as UInt16
    Dim PaddingBottom as UInt16
    Dim PaddingLeft as UInt16
    Dim PaddingRight as UInt16
    Dim CalcX1 as UInt16
    Dim CalcY1 as UInt16
    Dim CalcX2 as UInt16
    Dim CalcY2 as UInt16
    Dim CalcWidth as UInt16
    Dim CalcHeight as UInt16
    Dim CalcVisible as UInt16
End

Module Control
    Public Sub Initialize(ctrl as Control)
        ctrl.Font = Font.Default
        ctrl.Top = 0
        ctrl.Left = 0
        ctrl.Width = 10
        ctrl.Height = 10
        ctrl.Visible = 0
        ctrl.Resizable = 0
        ctrl.Focusable = 1
        ctrl.RedrawOnFocusChanged = 1
        ctrl.HasFocus = 0
        ctrl.ControlPaint = AddressOf(GenericControlPaint)
        ctrl.ControlFocusChanged = AddressOf(GenericControlFocusChanged)
        ctrl.ControlKeyboardInteracion = AddressOf(GenericControlKeyboardInteracion)
        ctrl.ControlMouseInteraction = AddressOf(GenericControlMouseInteraction)
        ctrl.OnClick = AddressOf(GenericOnClick)
        ctrl.OnFocus = AddressOf(GenericOnFocus)
        ctrl.OnKeyPress = AddressOf(GenericOnKeyPress)
        ctrl.OnKeyRelease = AddressOf(GenericOnKeyRelease)
        ctrl.OnLostFocus = AddressOf(GenericOnLostFocus)
        ctrl.HasParent = 0
        ctrl.HasChild = 0
        ctrl.HasNextControl = 0
        ctrl.PaddingBottom = 0
        ctrl.PaddingLeft = 0
        ctrl.PaddingRight = 0
        ctrl.PaddingTop = 0
        ctrl.Text = ""
        ctrl.Value = 0
        ctrl.CalcVisible = 0
    End

    Sub GenericControlPaint(ctrl as Control, focusChangeOnly as UInt16)
    End

    Sub GenericControlMouseInteraction(ctrl as Control, e as MouseEventArgs)
        If e.PrimaryButton Or e.SecondaryButton Then
            ctrl.OnClick.Invoke e
        End
    End

    Sub GenericControlKeyboardInteracion(ctrl as Control, e as KeyboardEventArgs)
        If e.Pressed Then
            ctrl.OnKeyPress.Invoke e
        Else
            ctrl.OnKeyRelease.Invoke e
        End
    End

    Sub GenericControlFocusChanged(ctrl as Control, focus as UInt16)
        If focus Then
            ctrl.OnFocus.Invoke
        Else
            ctrl.OnLostFocus.Invoke
        End
    End

    Sub GenericOnClick(ctrl as Control, e as MouseEventArgs)
    End

    Sub GenericOnKeyPress(ctrl as Control, e as KeyboardEventArgs)
    End

    Sub GenericOnKeyRelease(ctrl as Control, e as KeyboardEventArgs)
    End

    Sub GenericOnFocus(ctrl as Control)
    End

    Sub GenericOnLostFocus(ctrl as Control)
    End

    Public Sub SetParent(ctrl as Control, parent as Control)
        ctrl.HasParent = 1
        ctrl.Parent = parent
    End

    Public Function GetParent(ctrl as Control) as PtrByteArray
        if ctrl.HasParent == 0 Then Throw NotFoundError
        Return ctrl
    End

    Public Sub Add(ctrl as Control, child as Control)
        Dim tmp as PtrByteArray
        Dim parent as Control
        parent = ctrl
        If ctrl.HasChild Then
            #tmp = #ctrl.Child
            @tmp = @ctrl.Child
            @ctrl = @tmp
            #ctrl = #tmp
            While ctrl.HasNextControl
                #tmp = #ctrl.NextControl
                @tmp = @ctrl.NextControl
                @ctrl = @tmp
                #ctrl = #tmp
            End
            ctrl.HasNextControl = 1
            #tmp = #child
            @tmp = @child
            ctrl.NextControl = tmp
            child.HasParent = 1
            child.Parent = parent
        Else
            ctrl.HasChild = 1
            #tmp = #child
            @tmp = @child
            ctrl.Child = tmp
            child.HasParent = 1
            child.Parent = parent
        End
    End

    Public Function Count(ctrl as Control) as UInt16
        Dim ret as UInt16
        Dim ptr as PtrByteArray
        ret = 0
        If ctrl.HasChild Then
            ret ++
            #ptr = #ctrl.Child
            @ptr = @ctrl.Child
            #ctrl = #ptr
            @ctrl = @ptr
            While ctrl.HasNextControl
                ret++
                #ptr = #ctrl.NextControl
                @ptr = @ctrl.NextControl
                #ctrl = #ptr
                @ctrl = @ptr
            End
        End
        Return ret
    End

    Public Function Item(ctrl as Control, position as UInt16) as PtrByteArray
        Dim i as UInt16
        Dim ptr as PtrByteArray
        i = 0
        If ctrl.HasChild Then
            i ++
            #ptr = #ctrl.Child
            @ptr = @ctrl.Child
            #ctrl = #ptr
            @ctrl = @ptr
            If i == position Then Return ptr
            While ctrl.HasNextControl
                i ++
                #ptr = #ctrl.NextControl
                @ptr = @ctrl.NextControl
                #ctrl = #ptr
                @ctrl = @ptr
                If i == position Then Return ptr
            End
        End
        Throw NotFoundError
    End

    Public Sub Redraw(ctrl as Control)
        ctrl.ControlPaint.Invoke 0
    End

    Public Sub RedrawOnlyFocus(ctrl as Control)
        ctrl.ControlPaint.Invoke 1
    End

    Public Sub SetText(ctrl as Control, txt as PtrByteArray)
        ctrl.Text = txt
    End

    Public Function GetText(ctrl as Control) as ptrbytearray
        Return ctrl.Text
    End

    Public Sub DrawChildren(parent as Control)
        Dim i as UInt16
        Dim qtd as UInt16
        Dim child as Control
        qtd = Count(parent)
        If qtd Then
            For i = 1 to qtd
                child = Control.Item(parent, i)
                child.CalcX1 = parent.PaddingLeft + parent.Left + child.Left
                child.CalcY1 = parent.PaddingTop + parent.Top + child.Top
                child.CalcX2 = parent.PaddingLeft + parent.Left + child.Left + child.Width
                child.CalcY2 = parent.PaddingTop + parent.Top + child.Top + child.Height
                child.CalcVisible = 1
                If child.CalcX2 > (parent.Left + parent.Width - parent.PaddingRight) Then
                    child.CalcX2 = parent.Left + parent.Width - parent.PaddingRight
                End
                If child.CalcY2 > (parent.Top + parent.Height - parent.PaddingBottom) Then
                    child.CalcY2 = parent.Top + parent.Height - parent.PaddingBottom
                End
                If child.CalcX1 > (parent.Left + parent.Width - parent.PaddingRight) Then
                    child.CalcVisible = 0
                End
                If child.CalcY2 > (parent.Top + parent.Height - parent.PaddingBottom) Then
                    child.CalcVisible = 0
                End
                child.CalcWidth = child.CalcX2 - child.CalcX1
                child.CalcHeight = child.CalcY2 - child.CalcY1
                If child.CalcVisible <> 0 AndAlso child.Visible <> 0 Then 
                    Redraw child
                End
            End
        End
    End

    Public Sub Focus(ctrl as Control)
        Dim old as Control
        old = Application.CurrentFocus
        Application.CurrentFocus = ctrl
        ctrl.HasFocus = 1
        ctrl.ControlFocusChanged.Invoke 1
        If #old <> 0 Then 
            old.HasFocus = 0
            old.ControlFocusChanged.Invoke 0
            If old.RedrawOnFocusChanged Then RedrawOnlyFocus old
        End
        If ctrl.RedrawOnFocusChanged Then RedrawOnlyFocus ctrl
    End

    Public Sub ProcessKeyboard(ctrl as Control, e as KeyboardEventArgs)
        If e.AsciiChar == 9 Then
            Dim next as Control
            next = ctrl
            While next.HasNextControl
                next = ctrl.NextControl
                If next.Focusable Then
                    Focus next
                    Return
                End 
            End
            If ctrl.HasParent Then
                Dim i as UInt16
                Dim max as UInt16
                max = Count(ctrl.Parent)
                For i = 1 to max
                    next = Item(ctrl.Parent, i)
                    If next.Focusable Then
                        Focus next
                        Return
                    End
                End
            End
        Else
            ctrl.ControlKeyboardInteracion.Invoke e
        End
    End

    Public Sub Show(ctrl as Control)
        If ctrl.HasParent == 0 Then
            Add Screen.ScreenControl, ctrl
            Application.CurrentFocus = ctrl
            Application.CurrentFocusForm = ctrl
        End
        ctrl.Visible = 1
        Dim parent as Control
        parent = ctrl.Parent
        If parent.CalcVisible Then Redraw ctrl
    End

    Public Sub Hide(ctrl as Control)
        If ctrl.HasParent == 0 Then Return
        ctrl.Visible = 0
        Dim parent as Control
        parent = ctrl.Parent
        If parent.CalcVisible Then Redraw parent
    End

End

Module Screen
    Public Dim ScreenControl as Control

    Public Sub Initialize
        Control.Initialize ScreenControl
        ScreenControl.Top = 0
        ScreenControl.Left = 0
        ScreenControl.Width = Graphics.GetWidth()
        ScreenControl.Height = Graphics.GetHeight()
        ScreenControl.Visible = 1
        ScreenControl.CalcVisible = 0
        ScreenControl.ControlPaint = AddressOf(ControlPaint)
    End

    Sub ControlPaint(ctrl as Control, focusChangeOnly as UInt16)
        ScreenControl.CalcVisible = 1
        Graphics.ClearScreen SystemColors.BackgroundColor()
        Control.DrawChildren ctrl
    End
End

Module TextBox
    Public Sub Initialize(ctrl as Control)
        Control.Initialize ctrl
        ctrl.ControlPaint = AddressOf(ControlPaint)
        ctrl.ControlKeyboardInteracion = AddressOf(ControlKeyboardInteracion)
    End

    Sub ControlKeyboardInteracion(ctrl as Control, e as KeyboardEventArgs)
        If e.Pressed Then
            Dim ptr as PtrByteArray
            Dim len as UInt16
            e.Cancel = 0
            ctrl.OnKeyPress.Invoke e
            If e.Cancel == 0 Then
                If e.AsciiChar == 8 Then
                    ptr = ctrl.Text
                    len = String.Length(ctrl.Text)
                    If len > 0 Then
                        @ptr = @ptr + len
                        ptr = 0
                        Control.Redraw ctrl
                    End
                    Return
                End
                If (e.AsciiChar <> 13) AndAlso (e.AsciiChar <> 10) Then
                    Dim txt as String
                    len = String.Length(ctrl.Text)
                    ptr = ctrl.Text
                    If ptr < (len + 2) Then Return
                    txt = New
                    ptr = txt
                    @ptr++
                    ptr = e.AsciiChar
                    @ptr++
                    ptr = 0
                    String.Concat ctrl.Text, txt
                    Control.Redraw ctrl
                End
            End
        Else
            ctrl.OnKeyRelease.Invoke e
        End
    End

    Sub ControlPaint(ctrl as Control, focusChangeOnly as UInt16)
        If focusChangeOnly == 0 Then
            Graphics.DrawRectangle ctrl.CalcX1, ctrl.CalcY1, ctrl.CalcX2, ctrl.CalcY2, SystemColors.WindowBorderColor(), SystemColors.WindowColor()
            Graphics.DrawText ctrl.Font, ctrl.Text, ctrl.CalcX1 + 4, ctrl.CalcY1 + 4, ctrl.CalcX2 - 4, ctrl.CalcY2 - 4, SystemColors.TextColor(), 1
        End
        If ctrl.HasFocus <> 0 Then 
            Graphics.DrawLine ctrl.CalcX1 + 4, ctrl.CalcY2 - 2, ctrl.CalcX2 - 4, Ctrl.CalcY2 - 2, SystemColors.WindowBorderColor()
        Else
            Graphics.DrawLine ctrl.CalcX1 + 4, ctrl.CalcY2 - 2, ctrl.CalcX2 - 4, Ctrl.CalcY2 - 2, SystemColors.WindowColor()
        End
    End
End

Module Button
    Public Sub Initialize(ctrl as Control)
        Control.Initialize ctrl
        ctrl.ControlPaint = AddressOf(ControlPaint)
        ctrl.ControlKeyboardInteracion = AddressOf(ControlKeyboardInteracion)
    End

    Sub ControlKeyboardInteracion(ctrl as Control, e as KeyboardEventArgs)
        If e.Pressed Then
            ctrl.OnKeyPress.Invoke e
            If (e.AsciiChar == 13) OrElse (e.AsciiChar == 10) OrElse (e.AsciiChar == 32) Then
                Dim mouse as MouseEventArgs
                mouse = New
                mouse.X = ctrl.CalcX1
                mouse.Y = ctrl.CalcY1
                mouse.PrimaryButton = 1
                mouse.SecondaryButton = 0
                mouse.ScrollValue = 0
                ctrl.OnClick.Invoke mouse
            End
        Else
            ctrl.OnKeyRelease.Invoke e
        End
    End

    Sub ControlPaint(ctrl as Control, focusChangeOnly as UInt16)
        If focusChangeOnly == 0 Then
            Graphics.DrawRectangle ctrl.CalcX1, ctrl.CalcY1, ctrl.CalcX2, ctrl.CalcY2, SystemColors.WindowColor(), SystemColors.WindowColor()
            Graphics.DrawLine ctrl.CalcX1 + 2, ctrl.CalcY1, ctrl.CalcX2 - 2, Ctrl.CalcY1, SystemColors.WindowBorderColor()
            Graphics.DrawLine ctrl.CalcX1 + 2, ctrl.CalcY2, ctrl.CalcX2 - 2, Ctrl.CalcY2, SystemColors.WindowBorderColor()
            Graphics.DrawLine ctrl.CalcX1, ctrl.CalcY1 + 2, ctrl.CalcX1, Ctrl.CalcY2 - 2, SystemColors.WindowBorderColor()
            Graphics.DrawLine ctrl.CalcX2, ctrl.CalcY1 + 2, ctrl.CalcX2, Ctrl.CalcY2 - 2, SystemColors.WindowBorderColor()
            Graphics.DrawPixel ctrl.CalcX1 + 1, ctrl.CalcY1 + 1, SystemColors.WindowBorderColor()
            Graphics.DrawPixel ctrl.CalcX2 - 1, ctrl.CalcY1 + 1, SystemColors.WindowBorderColor()
            Graphics.DrawPixel ctrl.CalcX1 + 1, ctrl.CalcY2 - 1, SystemColors.WindowBorderColor()
            Graphics.DrawPixel ctrl.CalcX2 - 1, ctrl.CalcY2 - 1, SystemColors.WindowBorderColor()
            Graphics.DrawText ctrl.Font, ctrl.Text, ctrl.CalcX1 + 4, ctrl.CalcY1 + 4, ctrl.CalcX2 - 4, ctrl.CalcY2 - 4, SystemColors.TextColor(), 1
        End
        If ctrl.HasFocus <> 0 Then 
            Graphics.DrawLine ctrl.CalcX1 + 4, ctrl.CalcY2 - 2, ctrl.CalcX2 - 4, Ctrl.CalcY2 - 2, SystemColors.WindowBorderColor()
        Else
            Graphics.DrawLine ctrl.CalcX1 + 4, ctrl.CalcY2 - 2, ctrl.CalcX2 - 4, Ctrl.CalcY2 - 2, SystemColors.WindowColor()
        End
    End
End

Module Label
    Public Sub Initialize(ctrl as Control)
        Control.Initialize ctrl
        ctrl.ControlPaint = AddressOf(ControlPaint)
        ctrl.Focusable = 0
    End

    Sub ControlPaint(ctrl as Control, focusChangeOnly as UInt16)
        If focusChangeOnly == 0 Then
            Graphics.DrawRectangle ctrl.CalcX1, ctrl.CalcY1, ctrl.CalcX2, ctrl.CalcY2, SystemColors.WindowColor(), SystemColors.WindowColor()
            Graphics.DrawText ctrl.Font, ctrl.Text, ctrl.CalcX1, ctrl.CalcY1, ctrl.CalcX2, ctrl.CalcY2, SystemColors.TextColor(), 1
        End
    End
End

Module Form
    Public Sub Initialize(ctrl as Control)
        Control.Initialize ctrl
        ctrl.ControlPaint = AddressOf(ControlPaint)
        ctrl.OnFocus = AddressOf(OnFocus)
        ctrl.PaddingBottom = 2
        ctrl.PaddingLeft = 2
        ctrl.PaddingRight = 2
    End

    Sub OnFocus(ctrl as Control)
        Dim qtd as Uint16
        Dim i as UInt16
        Application.CurrentFocusForm = ctrl
        qtd = Control.Count(ctrl)
        For i = 1 to qtd
            Dim child as Control
            child = Control.Item(ctrl, i)
            If child.Focusable Then
                Control.Focus child
                Return
            End
        End
    End

    Sub ControlPaint(ctrl as Control, focusChangeOnly as UInt16)
        Dim fnt as Font
        Dim size as Size
        Dim leftText as UInt16
        Dim rightText as UInt16
        Dim i as UInt16
        size = new
        fnt = ctrl.Font
        If ctrl.CalcHeight < 30 Then Throw OutOfBoundsError
        If ctrl.CalcWidth < 50 Then Throw OutOfBoundsError
        Graphics.CalcFontSize fnt, ctrl.Text, size, ctrl.CalcWidth - 50, 0
        leftText = ctrl.CalcX1 + ((ctrl.CalcWidth - size.Width) SHR 1)
        rightText = ctrl.CalcX2 - ((ctrl.CalcWidth - size.Width) SHR 1)    
        If focusChangeOnly == 0 Then
            Graphics.DrawRectangle ctrl.CalcX1, ctrl.CalcY1, ctrl.CalcX2, ctrl.CalcY2, SystemColors.WindowBorderColor(), SystemColors.WindowColor()
            Graphics.DrawLine ctrl.CalcX1, ctrl.CalcY1+1+fnt.Height, ctrl.CalcX2, ctrl.CalcY1+1+fnt.Height, SystemColors.WindowBorderColor()
            Graphics.DrawText fnt, ctrl.Text, leftText, ctrl.CalcY1+1, rightText, ctrl.CalcY1+1+fnt.Height, SystemColors.WindowTitleColor(), 0
            Graphics.DrawRectangle ctrl.CalcX1 + 5, ctrl.CalcY1 + 4, ctrl.CalcX1 + 11, ctrl.CalcY1 + fnt.Height -3, SystemColors.WindowBorderColor(),SystemColors.WindowColor()
            ctrl.PaddingTop = 2 + fnt.Height
            Control.DrawChildren ctrl
        End
        If (#ctrl == #Application.CurrentFocusForm) And (@ctrl == @Application.CurrentFocusForm) Then
            For i = ctrl.CalcY1 + 4 to ctrl.CalcY1 + fnt.Height - 3
                Graphics.DrawLine ctrl.CalcX1 + 2, i, ctrl.CalcX1 + 3, i, SystemColors.WindowBorderColor()
                Graphics.DrawLine ctrl.CalcX1 + 13, i, leftText - 5, i, SystemColors.WindowBorderColor()
                Graphics.DrawLine rightText + 4, i, ctrl.CalcX2 - 2, i, SystemColors.WindowBorderColor()
                i++
            End
        Else
            For i = ctrl.CalcY1 + 4 to ctrl.CalcY1 + fnt.Height - 3
                Graphics.DrawLine ctrl.CalcX1 + 2, i, ctrl.CalcX1 + 3, i, SystemColors.WindowColor()
                Graphics.DrawLine ctrl.CalcX1 + 13, i, leftText - 5, i, SystemColors.WindowColor()
                Graphics.DrawLine rightText + 4, i, ctrl.CalcX2 - 2, i, SystemColors.WindowColor()
                i++
            End
        End
    End
End

Structure Theme
    Dim BackgroundColor as UInt16
    Dim TextColor as UInt16
    Dim WindowBorderColor as UInt16
    Dim WindowColor as UInt16
    Dim WindowTitleColor as UInt16
End

Module SystemColors
    Pointer Dim Current as Theme

    Public Function BackgroundColor() as UInt16
        Return Current.BackgroundColor
    End

    Public Function TextColor() as UInt16
        Return Current.TextColor
    End

    Public Function WindowBorderColor() as UInt16
        Return Current.WindowBorderColor
    End

    Public Function WindowColor() as UInt16
        Return Current.WindowColor
    End

    Public Function WindowTitleColor() as UInt16
        Return Current.WindowTitleColor
    End

    Public Sub Initialize(newTheme as Theme)
        Current = newTheme
    End
End

Module Application
    Dim CurrentTheme as Theme
    Dim Running as UInt16
    Public Dim CurrentFocus as Control
    Public Dim CurrentFocusForm as Control
    Public Dim KeyboardUpdate as Action(Of Control)
    Public Dim MouseUpdate as Action(Of Control)
    Public Dim ExitStatus as UInt16

    Public Sub ApplyDarkTheme()
        CurrentTheme.BackgroundColor = Colors.Black()
        CurrentTheme.TextColor = Colors.White()
        CurrentTheme.WindowBorderColor = Colors.White()
        CurrentTheme.WindowColor = Colors.Black()
        CurrentTheme.WindowTitleColor = Colors.White()
        SystemColors.Initialize CurrentTheme
        If Running Then Control.Redraw Screen.ScreenControl
    End

    Public Sub ApplyDefaultTheme()
        CurrentTheme.BackgroundColor = Colors.White()
        CurrentTheme.TextColor = Colors.Black()
        CurrentTheme.WindowBorderColor = Colors.Black()
        CurrentTheme.WindowColor = Colors.White()
        CurrentTheme.WindowTitleColor = Colors.Black()
        SystemColors.Initialize CurrentTheme
        If Running Then Control.Redraw Screen.ScreenControl
    End

    Public Sub Initialize
        #CurrentFocus = 0
        @CurrentFocus = 0
        Running = 0
        ExitStatus = 0
        Screen.Initialize
        ApplyDefaultTheme
        KeyboardUpdate = AddressOf(GenericKeyboardUpdate)
        MouseUpdate = AddressOf(GenericMouseUpdate)
    End

    Sub GenericKeyboardUpdate(ctrl as Control)
        If OS.ConsoleAvail() Then
            Dim e as KeyboardEventArgs
            e = New
            e.AsciiChar = OS.ConsoleReadChar()
            e.UTF8LowWord = e.AsciiChar
            e.UTF8HighWord = 0
            e.Cancel = 0
            e.Pressed = 1
            Control.ProcessKeyboard ctrl, e
        End
    End

    Sub GenericMouseUpdate(ctrl as Control)
    End

    Public Sub Exit(status as UInt16)
        ExitStatus = status
        Running = 0
    End

    Public Sub Run(ctrl as Control)
        ctrl.Visible = 1
        Control.Add Screen.ScreenControl, ctrl
        Control.Redraw Screen.ScreenControl
        Control.Focus ctrl
        Running = 1
        While Running
            KeyboardUpdate.Invoke CurrentFocus
            MouseUpdate.Invoke CurrentFocus
            asm "sti"
            asm "hlt"
        End
    End
End